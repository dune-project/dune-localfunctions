// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:
#ifndef DUNE_LOCALFUNCTIONS_COMMON_UNIQUETYPES_HH
#define DUNE_LOCALFUNCTIONS_COMMON_UNIQUETYPES_HH

#include <utility>
#include <type_traits>

#include <dune/common/std/type_traits.hh>


namespace Dune {

  namespace Impl {

    template<template<class...> class Target, class ToDoList, class... Processed>
    struct UniqueTypesHelper;

    template<template<class...> class Target, class... Processed>
    struct UniqueTypesHelper<Target, TypeList<>, Processed...>
    {
      using type = Target<Processed...>;
    };

    template<template<class...> class Target, class T0, class... T, class... Processed>
    struct UniqueTypesHelper<Target, TypeList<T0, T...>, Processed...>
    {
      using type = std::conditional_t<
        Dune::Std::disjunction<std::is_same<T0, Processed>...>::value,
        typename UniqueTypesHelper<Target, TypeList<T...>, Processed...>::type,
        typename UniqueTypesHelper<Target, TypeList<T...>, T0, Processed...>::type>;
    };

  } // namespace Impl

  /** \brief Remove duplicates from a list of types
   *
   * For a given list of types T... instantiate Target<S...>, where
   * S... is generated by removing duplicate types from T... . This
   * is useful for std::variant which does not like to be instantiated
   * with duplicate types.
   */
  template<template<class...> class Target, class... T>
  using UniqueTypes_t = typename Impl::UniqueTypesHelper<Target, TypeList<T...>>::type;

} // namespace Dune

#endif // DUNE_LOCALFUNCTIONS_COMMON_UNIQUETYPES_HH
